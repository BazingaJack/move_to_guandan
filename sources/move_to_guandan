module move_to_guandan::message {
    use std::error;
    use std::signer;
    use std::string;
    use aptos_std::simple_map::{SimpleMap,Self};
    use aptos_framework::event;

    struct Card has store {
        id: u8,
        color: u8,
        num: u8,
        owner: address,
        status: bool
    }

    struct CardArray has store {
        sender: address,
        cards: vector<Card>
    }

    struct Player has store {
        addr: address,
        level: u8,
        teammate: address,
        maxcard: u8,
        usedcard: u8
    }

    struct Round has store {
        rid: u8,
        rlevel: u8,
        lastnum: u8,
        lasttype: u8,
        lastsender: address,
        isswap: bool,
        isover: bool
    }

    struct Game has store {
        gid: u256,
        rid: u8,
        playeraddrs: vector<address>,
        lastorder: vectore<address>,
        winer: address,
        status: u8
    }

    const GLOBAL_SALT: u8 = 0;

    let playermap:SimpleMap<address,Player> = simple_map::create();
    let gamemap:SimpleMap<u256,Game> = simple_map::create();
    let cardmap:SimpleMap<address,vector<Card>> = simple_map::create();
    let gameround:SimpleMap<u256,vector<Round>> = simple_map::create();

    let deck = vector::empty<u8>();

    public entry fun init() {
        for(i in 0..108){
            vector::push_back(&mut deck,i);
        }
    }

    #[view]
    public fun judgeBoom(cards: vector<Card>): bool {
        let len = vector::length<Card>(&mut cards);
        for(i in 0..len){
            let &c1 = vector::borrow<Card>(&cards,i);
            let &c2 = vector::borrow<Card>(&cards,i+1);
            if(c1.num != c2.num) return false;
        }
        return true;
    }


    #[view]
    public fun judgeStraight(cards: vector<Card>): (bool,bool) {
        let len = vector::length<Card>(&mut cards);
        if(len != 5) return (false,false);
        bool isValid = true;
        bool isSameColor = true;
        for(i in 0..4){
            let &c1 = vector::borrow<Card>(&cards,i);
            let &c2 = vector::borrow<Card>(&cards,i+1);
            if(c1.num != c2.num){
                isValid = false;
                break;
            }
            if(c1.color != c2.color) isSameColor = false;
        }
        return (isValid,isSameColor);
    }

    #[view]
    public fun judgeTriplePair(cards: vector<Card>): bool {
        bool res = true;
        let i:u8 = 0;
        while(i < 5){
            let &c1 = vector::borrow<Card>(&cards,i);
            let &c2 = vector::borrow<Card>(&cards,i+1);
            if(c1.num != c2.num){
                res = false;
                break;
            }
            i = i + 2;
        }

        let &card0 = vector::borrow<Card>(&cards,0);
        let &card2 = vector::borrow<Card>(&cards,2);
        let &card4 = vector::borrow<Card>(&cards,4);
        if(card0.num == card2.num || card0.num == card4.num || card2.num == card4.num) res = false;
        return res;
    }

    #[view]
    public fun judgeCardType(cards: vector<Card>): (u8,u8) {
        let len = vector::length<Card>(&mut cards);
        let &card0 = vector::borrow<Card>(&cards,0);
        let &card1 = vector::borrow<Card>(&cards,1);
        let &card2 = vector::borrow<Card>(&cards,2);
        let &card3 = vector::borrow<Card>(&cards,3);
        let &card4 = vector::borrow<Card>(&cards,4);
        if(len == 1){
            return (1,card0.num);
        }else if(len == 2){
            if(card0.num == card1.num) return (2,card0.num);
            else return (0,0);
        }else if(len == 3){
            if((card0.num == card1.num) && (card0.num == card2.num)) return (3,card0.num);
            else return (0,0);
        }else if(len == 4){
            if(judgeBoom(cards)) return (4,card0.num);
            else if(card0.num + card1.num + card2.num + card3.num == 62) return (5,16);
            else return (0,0); 
        }else if(len == 5){
            if(judgeBoom(cards)) return (6,card0.num);
            if(card0.num == card1.num && card0.num == card2.num && card3.num == card4.num) return (7,card0.num);
            bool isValid;
            bool isSameColor;
            (isValid,isSameColor) = judgeStraight(cards);
            if(isValid){
                if(isSameColor) return (8,card0.num);
                else return (9,card0.num);
            }
            return (0,0);
        }else if(len == 6){
            if(judgeBoom(cards)) return (10,card0.num);
            if(judgeTriplePair(cards)) return (11,card0.num);
            if(judgeTwoTripleSingle(cards)) return (12,card0.num);
        }else return (0,0);
    }

    public fun registerPlayer(playerAddr: address) {
        assert!(simple_map::contains_key(&mut playermap,&playerAddr) == false);
        let player = Player {
            addr: playerAddr,
            level: 0,
            teammate: playerAddr,
            maxcard: 0,
            usedcard: 0
        };
        simple_map::add(&mut playermap,playerAddr,player);
    }

    public fun randomTeammate(salt: u256) {
        //TODO
        // radomness
    }

    #[view]
    public fun checkGameId(gid: u256): bool {
        if(simple_map::contains_key(&gamemap,&gid) == false) return false;
        let &g = simple_map::borrow(&gamemap,&gid);
        if(g.status == 0 || g.status == 3) return false;
        else return true;
    }

    public fun initGame(id: u256,playerAddrs: vector<address>,salt :u256) {
        assert!(simple_map::contains_key(&gamemap,&id) == false);
        let g = Game {
            gid: id,
            rid: 0,
            playeraddrs: playerAddrs,
            lastorder: playerAddrs,
            winer: address(0),
            status: 1
        };
        let teamMate = randomTeammate(salt);
        let  player0Addr = vector::borrow(&playerAddrs,0);
        let  player1Addr = vector::borrow(&playerAddrs,1);
        let  player2Addr = vector::borrow(&playerAddrs,2);
        let  player3Addr = vector::borrow(&playerAddrs,3);
        let mut player0 = simple_map::borrow_mut(&playermap,&player0Addr);
        let mut player1 = simple_map::borrow_mut(&playermap,&player1Addr);
        let mut player2 = simple_map::borrow_mut(&playermap,&player2Addr);
        let mut player3 = simple_map::borrow_mut(&playermap,&player3Addr);
        if(teamMate == 0){
            player0.teammate = player1.addr;
            player1.teammate = player0.addr;
            player2.teammate = player3.addr;
            player3.teammate = player2.addr;
        }else if(teamMate == 1){
            player0.teammate = player2.addr;
            player2.teammate = player0.addr;
            player1.teammate = player3.addr;
            player3.teammate = player1.addr;
        }else{
            player0.teammate = player3.addr;
            player3.teammate = player0.addr;
            player1.teammate = player2.addr;
            player2.teammate = player1.addr;
        }
    }

    public fun getCard(cardnum: u8): (u8,u8) {
        let color:u8 = cardnum % 54 / 13;
        let num:u8 = (cardnum % 54) % 13 + 2;
        if(color == 4) num = num + 13;
        return (color,num);
    }

    public fun checkCardArray(sender: address,cardArr: CardArray): bool {
        let arraySize = vector::length(&cardArr.cards);
        let vec = simple_map::borrow(&cardmap,&sender);
        for(i in 0..arraySize){
            let c = vector::borrow(&vec,i);
            if(c.owner != sender) return false;
        }
        return true;
    }

    public fun randomHandCard(playerAddrs: vector<address>) {
        let len = vector::length(&deck);
        assert!(len == 128);
        let remaining:u8 = 128;
        for(i in 0..27){
            for(j in 0..4){
                //TODO
                let randomIndex = 1;
                u8 mut cardNum = vector::borrow_mut(&deck,randomIndex);
                let temp = &cardNum;
                u8 lastNum = vector::borrow(&deck,remaining-1);
                cardNum = lastNum;
                remaining = remaining - 1;
                u8 c,n;
                (c,n) = getCard(temp);
                let ownerAddr = vector::borrow(&playerAddrs,j);
                let cardOwner = simple_map::borrow(&playermap,&ownerAddr);
                let tempCard = Card {
                    id: i,
                    color: c,
                    num: n,
                    owner: cardOwner.addr,
                    status: true
                };
                if(n > cardOwner.maxcard) cardOwner.maxcard = n;
                if(i == 0) cardOwner.usedcard = 0;
            }
        }
    }

    public fun initRound(gameid: u256,playerAddrs: vector<address>) {
        let mut g = simple_map::borrow_mut(&gamemap,gameid);
        assert!(g.status == 1 || g.status == 2);
        let r = Round {
            rid: g.roundid,
            rlevel: 0,
            lastnum: 0,
            lasttype: 0,
            lastsender: address(0),
            isswap: false,
            isover: false
        };
        let mut gr = simple_map::borrow_mut(&gameround,gameid);
        simple_map::add(&gr,&gameid,&r);
        g.roundid = g.roundid + 1;
        randomHandCard(playerAddrs);
    }

    public fun checkRoundId(gameid: u256,roundid: u8): bool {
        if(checkGameId(gameid) == false) return false;
        let roundvec = simple_map::borrow(&gameround,gameid);
        let r = vector::borrow(&roundvec,roundid);
        if(r.isover == false) return true;
        else return false;
    }

    public fun sendCardArray(gameid: u256,roundid: u8,sender: address,cardArrs: CardArray): bool {
        let len = vector::length(&cardArrs.cards);
        if(len == 0) return true;
        assert!(checkRoundId(gameid,roundid) == true);
        assert!(checkCardArray(sender,cardArrs) == true);
        let ctype: u8;
        let cnum: u8;
        (ctype,cnum) = judgeCardType(cardArrs.cards);
        if(ctype == 0) return false;
        let mut r = simple_map::borrow_mut(&gameround,&gameid,&roundid);
        if(r.lastSender == sender){
            r.lastType = cType;
            r.lastNum = cNum;
        }else {
            if(cType != r.lastType) return false;
            else {
                if(cType == 1){
                    if(cNum == r.level) return (r.lastNum < 15);
                }else return (cNum > r.lastNum); 
            }
        }
        return true;
    }

    public fun swapCard(gameid: u256,roundid: u8,fromAddr: vector<address>,toAddr: vector<address>,cards: vector<Card>,flag: bool): bool {
        assert!(checkRoundId(gameid,roundid) == true);
        let fromlen = vector::length(&fromAddr);
        let tolen = vector::length(&toAddr);
        let cardslen = vector::length(&cards);
        assert!(fromlen == tolen && fromlen == cardslen);
        let res:bool = true;
        let mut g = simple_map::borrow_mut(&gameround,&gameid,&roundid);
        let mut order = g.lastorder;
        let order0 = vector::borrow(&order,0);
        let order1 = vector::borrow(&order,1);
        let order2 = vector::borrow(&order,2);
        let order3 = vector::borrow(&order,3);
        let mut order0Player = simple_map::borrow_mut(&playermap,&order0);
        let mut order1Player = simple_map::borrow_mut(&playermap,&order1);
        let mut order2Player = simple_map::borrow_mut(&playermap,&order2);
        let mut order3Player = simple_map::borrow_mut(&playermap,&order3);
        if(g.status == 2){
            if(order0Player.teammate == order1){
                if(flag){
                    if(order2Player.maxcard != 16 || order3Player.maxcard != 16) return false;
                }
                if(fromlen != 4) return false;
                let from0 = vector::borrow(&fromAddr,0);
                let from1 = vector::borrow(&fromAddr,1);
                let from2 = vector::borrow(&fromAddr,2);
                let from3 = vector::borrow(&fromAddr,3);
                let to0 = vector::borrow(&toAddr,0);
                let to1 = vector::borrow(&toAddr,1);
                let to2 = vector::borrow(&toAddr,2);
                let to3 = vector::borrow(&toAddr,3);
                let card0 = vector::borrow(&cards,0);
                let card1 = vector::borrow(&cards,1);
                let card2 = vector::borrow(&cards,2);
                let card3 = vector::borrow(&cards,3);
                for(i in 0..4){
                    if(i == 0){
                        if(from0 != order0 || to0 != order3 || card0.num > 10) return false;
                    }else if(i == 1){
                        if(from1 != order1 || to1 != order2 || card1.num > 10) return false;
                    }else if(i == 2){
                        if(from2 != order2 || to2 != order1 || card2.num != order2Player.maxcard) return false;
                    }else {
                        if(from3 != order3 || to3 != order0 || card3.num != order3Player.maxcard) return false;
                    }
                }
            }else {
                if(fromlen != 2) return false;
                let from0 = vector::borrow(&fromAddr,0);
                let from1 = vector::borrow(&fromAddr,1);
                let to0 = vector::borrow(&toAddr,0);
                let to1 = vector::borrow(&toAddr,1);
                let card0 = vector::borrow(&cards,0);
                let card1 = vector::borrow(&cards,1);
                if(from0 != order0 || to0 != order3 || card0.num > 10) return false;
                if(from1 != order3 || to1 != order0 || card1.num != order3Player.maxcard) return false;
            }
        }
        g.isswap = res;
        return res;
    }

    public fun roundProcess(gameid: u256,roundid: u8,senderAddrs: vector<address>,arrays: vector<CardArray>): (bool,vector<address>) {
        assert!(checkRoundId(gameid,roundid) == true);
        let senderlen = vector::length(&senderAddrs);
        let arraylen = vector::length(&arrays);
        assert!(senderlen == arraylen);
        let mut g = simple_map::borrow_mut(&gameround,&gameid,&roundid);
        assert!(g.isswap == true);
        for(i in 0..senderlen){
            let currentSender = vector::borrow(&senderAddrs,i);
            let currentArray = vector::borrow(&arrays,i);
            if(sendCardArray(gameid,roundid,currentSender,currentArray) == false) return (false,g.lastorder);
            let s = simple_map::borrow(&playermap,currentSender);
            if(s.usedcard == 27) g.lastorder.push_back(currentSender);
        }
        let mut order = g.lastorder;
        let temporder = order;
        let order0 = vector::borrow(&order,0);
        let order1 = vector::borrow(&order,1);
        let order2 = vector::borrow(&order,2);
        let order3 = vector::borrow(&order,3);
        let mut order0Player = simple_map::borrow_mut(&playermap,&order0);
        let mut order1Player = simple_map::borrow_mut(&playermap,&order1);
        let mut order2Player = simple_map::borrow_mut(&playermap,&order2);
        let mut order3Player = simple_map::borrow_mut(&playermap,&order3);
        if(order0Player.teammate == order1){
            order0Player.level = order0Player.level + 3;
            order1Player.level = order1Player.level + 3;
        }else if(order0Player.teammate == order2){
            order0Player.level = order0Player.level + 2;
            order2Player.level = order2Player.level + 2;
        }else {
            order0Player.level = order0Player.level + 1;
            order3Player.level = order3Player.level + 1;
        }
        g.status = 2;
        if(order0Player.level >= 14){
            g.status = 3;
            g.winer = order0;
        }
        if(g.status == 2) {
            while(!vector::is_empty(&order)){
                vector::pop_back(&order);
            }
        }
        return (true,temporder);
    }

    public fun gameResultQuery(gameid: u256): (bool,address,address) {
        assert!(checkGameId(gameid) == true);
        let g = simple_map::borrow(&gamemap,gameid);
        if(g.status != 3) return(false,address(0),address(0));
        else {
            let winer = simple_map::borrow(&playermap,g.winer);
            let winerTeammate = winer.teammate;
            return (true,winer,winerTeammate);
        }
    }
    
}